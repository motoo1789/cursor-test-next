// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Article  {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  like      Int       @default(0)
  published Boolean   @default(false)
  tags      Tag[]     @relation("ArticleTags")
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  icon Icon  @relation(fields: [iconId], references: [id])
  iconId Int  
  publishedAt  DateTime
  createdAt DateTime  @default(now())
  modifiedAt DateTime @default(now())

}

model Icon {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  articles  Article[]
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  articles Article[]  @relation("ArticleTags") // ← Article モデルとリレーション
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?    @unique
  image      String?
  githubId   String?    @unique
  articles   Article[]
  accounts   Account[]
  sessions   Session[]
  createdAt  DateTime   @default(now())
  modifiedAt DateTime   @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}